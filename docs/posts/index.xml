<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ding Luo</title>
        <link>https://dingdl.github.io/posts/</link>
        <description>Recent content in Posts on Ding Luo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 26 Mar 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://dingdl.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>101 Series - PySpark and Databricks</title>
            <link>https://dingdl.github.io/posts/2021/03/101-series-pyspark-and-databricks/</link>
            <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://dingdl.github.io/posts/2021/03/101-series-pyspark-and-databricks/</guid>
            <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">trajectory_df_to_geojson</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">trip_id_column</span><span class="p">,</span> 
                             <span class="n">properties</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">):</span>
    <span class="n">geojson</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;FeatureCollection&#34;</span><span class="p">,</span>
        <span class="s2">&#34;features&#34;</span><span class="p">:</span> <span class="p">[]</span>
    <span class="p">}</span>
    <span class="n">ls_trip_id</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">trip_id_column</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">trip_id</span> <span class="ow">in</span> <span class="n">ls_trip_id</span><span class="p">:</span>
        <span class="n">tmp_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="n">trip_id_column</span><span class="p">]</span> <span class="o">==</span> <span class="n">trip_id</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">tmp_df</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">timestamp</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">cur_feature</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;Feature&#34;</span><span class="p">,</span> 
            <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{},</span> 
            <span class="s2">&#34;geometry&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;LineString&#34;</span><span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">prop</span> <span class="ow">in</span> <span class="n">properties</span><span class="p">:</span>
            <span class="n">prop_value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tmp_df</span><span class="p">[</span><span class="n">prop</span><span class="p">]</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">cur_feature</span><span class="p">[</span><span class="s2">&#34;properties&#34;</span><span class="p">][</span><span class="n">prop</span><span class="p">]</span> <span class="o">=</span> <span class="n">prop_value</span>
        <span class="n">coords</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">tmp_df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">timestamp</span><span class="p">])</span>
            <span class="n">unix_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">convert_dt_to_unix_time</span><span class="p">(</span><span class="n">dt</span><span class="p">))</span>
            <span class="n">longitude</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">lon</span><span class="p">],</span> <span class="mi">6</span><span class="p">)</span>
            <span class="n">latitude</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">lat</span><span class="p">],</span> <span class="mi">6</span><span class="p">)</span>
            <span class="n">cur_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">longitude</span><span class="p">,</span> <span class="n">latitude</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">unix_time</span><span class="p">]</span>
            <span class="n">coords</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur_data</span><span class="p">)</span>
        <span class="n">cur_feature</span><span class="p">[</span><span class="s2">&#34;geometry&#34;</span><span class="p">][</span><span class="s2">&#34;coordinates&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">coords</span>
        <span class="n">geojson</span><span class="p">[</span><span class="s2">&#34;features&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur_feature</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">geojson</span>
</code></pre></div><p>dfddfd</p>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">params</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">CopyrightHTML</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">TwitterUser</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;spf13&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">SidebarRecentLimit</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Preparing GPS data for kepler.gl trip visualization</title>
            <link>https://dingdl.github.io/posts/2021/03/preparing-gps-data-for-kepler.gl-trip-visualization/</link>
            <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://dingdl.github.io/posts/2021/03/preparing-gps-data-for-kepler.gl-trip-visualization/</guid>
            <description>Over the past years I have been using kepler.gl more and more often for geospatial visualiztion. The reason is just simple: powerful, easy, fast. It serves as a perfect visualization tool for EDA tasks. Very often when I show the visualization to my stakeholders, especially those who are from the traditional business side, they are immediately impressed!
In this post, I want to simply share some python scripts for preparing GPS trajectory data for kepler.</description>
            <content type="html"><![CDATA[<p>Over the past years I have been using <a href="https://kepler.gl/">kepler.gl</a> more and more often for geospatial visualiztion. The reason is
just simple: powerful, easy, fast. It serves as a perfect visualization tool for EDA tasks. Very often when I show
the visualization to my stakeholders, especially those who are from the traditional business side, they are immediately
impressed!</p>
<p>In this post, I want to simply share some python scripts for preparing GPS trajectory data for kepler.gl&rsquo;s <a href="https://docs.kepler.gl/docs/user-guides/c-types-of-layers/k-trip">trip
visualization feature</a>. This would help because
my experience is that most GPS trajectory data would share a similar structure with the key columns of trip ID, timestamp,
latitude, and longitude. Such data are always stored and shared in a tabular form, thus could be directly loaded
as a pandas dataframe. What the python scripts do is to further convert such a dataframe to the geojson file required by
kepler.gl.</p>
<p>This post is inspired by <a href="https://geoffboeing.com/2015/10/exporting-python-data-geojson/">one of the Geoff Boeing&rsquo;s posts</a>.
(Check out Geoff Boeing&rsquo;s awesome research and open source tool <a href="https://github.com/gboeing/osmnx">osmnx</a> - ABSOLUTELY
a game changer for urban analytics!)
I modified his code by adding a time conversion function (timestamp to unix time string) and making the geojson
output compatible with kepler.gl&rsquo;s requirement.</p>
<p>The functions used are shown below.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>


<span class="k">def</span> <span class="nf">timestamp2unixtime</span><span class="p">(</span><span class="n">dt</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Convert a &#34;Date Time&#34; string to unix time string
</span><span class="s2">    https://en.wikipedia.org/wiki/Unix_time
</span><span class="s2">    Example:
</span><span class="s2">        &#39;2021-02-25 17:18:30&#39; -&gt; 1614269910
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">import</span> <span class="nn">time</span>
    <span class="n">new_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2"> %H:%M:%S&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">mktime</span><span class="p">(</span><span class="n">new_time</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">df_to_geojson</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">trip_id</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">):</span>
    <span class="n">geojson</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;FeatureCollection&#34;</span><span class="p">,</span>
        <span class="s2">&#34;features&#34;</span><span class="p">:</span> <span class="p">[]</span>
    <span class="p">}</span>
    <span class="n">ls_trip_id</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">trip_id</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">trip_id</span> <span class="ow">in</span> <span class="n">ls_trip_id</span><span class="p">:</span>
        <span class="n">tmp_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="n">trip_id</span><span class="p">]</span> <span class="o">==</span> <span class="n">trip_id</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">tmp_df</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">timestamp</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">cur_feature</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;Feature&#34;</span><span class="p">,</span> 
            <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{},</span> 
            <span class="s2">&#34;geometry&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;LineString&#34;</span><span class="p">}</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="n">prop</span> <span class="ow">in</span> <span class="n">properties</span><span class="p">:</span>
            <span class="n">prop_value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tmp_df</span><span class="p">[</span><span class="n">prop</span><span class="p">]</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">cur_feature</span><span class="p">[</span><span class="s2">&#34;properties&#34;</span><span class="p">][</span><span class="n">prop</span><span class="p">]</span> <span class="o">=</span> <span class="n">prop_value</span>
        
        <span class="n">coords</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">tmp_df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">timestamp</span><span class="p">])</span>
            <span class="n">unix_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">timestamp2unixtime</span><span class="p">(</span><span class="n">dt</span><span class="p">))</span>
            <span class="n">longitude</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">lon</span><span class="p">],</span> <span class="mi">6</span><span class="p">)</span>
            <span class="n">latitude</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">lat</span><span class="p">],</span> <span class="mi">6</span><span class="p">)</span>
            <span class="k">if</span> <span class="o">~</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">unix_time</span><span class="p">)</span> \
                <span class="ow">and</span> <span class="o">~</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">longitude</span><span class="p">)</span> \ 
                <span class="ow">and</span> <span class="o">~</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">latitude</span><span class="p">):</span>
                <span class="n">point</span> <span class="o">=</span> <span class="p">[</span><span class="n">longitude</span><span class="p">,</span> <span class="n">latitude</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">unix_time</span><span class="p">]</span>
                <span class="n">coords</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
        <span class="n">cur_feature</span><span class="p">[</span><span class="s2">&#34;geometry&#34;</span><span class="p">][</span><span class="s2">&#34;coordinates&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">coords</span>
        <span class="n">geojson</span><span class="p">[</span><span class="s2">&#34;features&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur_feature</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">geojson</span>


<span class="k">def</span> <span class="nf">save_geojson_file</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
        <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">geojson</span><span class="p">,</span> <span class="n">fp</span><span class="p">)</span>
</code></pre></div><p>To show an example, I found some cycling GPS data used in my master&rsquo;s thesis research back in Stockholm (-_-).
I will try to share the dataset as well.</p>
<p>Checkout the map <a href="../../../cyclist_trips.html">here</a>.</p>
<p>Below is a quick gif demo.</p>
<center>
<img src="../../../../img/cyclists.gif" width = "700" alt="quote" align=center />
</center>
]]></content>
        </item>
        
        <item>
            <title>101 Series - Unit Testing</title>
            <link>https://dingdl.github.io/posts/2021/02/101-series-unit-testing/</link>
            <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://dingdl.github.io/posts/2021/02/101-series-unit-testing/</guid>
            <description>On my recent project, I have been learning a bunch of new things, which from my very own perspective are crucial to someone who wants to become a full-fledged data scientist (i.e., research &amp;amp; development). I am really excited about learning and practicing these new tools and skills on the job, and therefore decide to create my personal 101 series on them. The plan is to continously update and improve the content.</description>
            <content type="html"><![CDATA[<p>On my recent project, I have been learning a bunch of new things, which from my very own perspective are crucial to
someone who wants to become a full-fledged data scientist (i.e., research &amp; development). I am really excited about learning and practicing these new
tools and skills on the job, and therefore decide to create my personal 101 series on them. The plan is to continously
update and improve the content.</p>
<p>In this very first 101 series post, let&rsquo;s look at unit testing with Python.</p>
<h2 id="why-unit-testing">Why unit testing?</h2>
<p>I am definitely not an experienced software developer, and never seriously spent time writing unit tests
on my functions and modules (tried to learn once but gave up). I don&rsquo;t want to repeat what Google tells us
about the importance of unit testing, but so far I have at least gained some better understanding through
my own experience about why unit testing could be benefical:</p>
<ul>
<li>It helps you better design your code. If you find a function hard to be tested, then maybe the function
is simply too complex (it does too many things). I find it useful to avoid writing really long functions.</li>
<li>You gain more confidence in what you have developed. Data ingestion and processing pipelines could easily
end up with so many layers. Having unit tests on individual functions would just enable us to move forward
without worring about the data engineering foundation we build evey other second.</li>
</ul>
<h2 id="setup">Setup</h2>
<p>I use <code>unittest</code> as the testing framework
and <code>pytest</code> as the <a href="https://docs.pytest.org/en/stable/unittest.html">test runner</a>.
Since <code>pytest</code> does not come with Python by default, we do need to first get <code>pytest</code> installed.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip</span> <span class="n">install</span> <span class="n">pytest</span>
</code></pre></div><h2 id="my-learning-example">My learning example</h2>
<p>I created the following example (which is probably not a good one) with the main purpose to demonstrate <code>patch()</code> provided by <code>unittest.mock</code>.</p>
<p>In the project folder, there are three files listed as below.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="p">|</span>- my_module.py
<span class="p">|</span>- test_my_module.py 
<span class="p">|</span>- SampleData.csv
</code></pre></div><p>And below is my module for loading data with <code>pandas</code></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># my_module.py</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>

<span class="n">INPUT_FOLDERPATH</span> <span class="o">=</span> <span class="s1">&#39;./&#39;</span>


<span class="k">class</span> <span class="nc">DataLoader</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">filepath</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_filepath</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_filepath</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">INPUT_FOLDERPATH</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">filename</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">filepath</span><span class="p">)</span>
</code></pre></div><p>If I run the following lines:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="s1">&#39;SampleData.csv&#39;</span><span class="p">)</span>
<span class="n">sample_df</span> <span class="o">=</span> <span class="n">data_loader</span><span class="o">.</span><span class="n">load_data</span><span class="p">()</span>
<span class="n">sample_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>I can the loaded dataframe as below.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">  <span class="n">OrderDate</span>   <span class="n">Region</span>      <span class="n">Rep</span>    <span class="n">Item</span>  <span class="n">Units</span>  <span class="n">Unit</span> <span class="n">Cost</span>     <span class="n">Total</span>
<span class="mi">0</span>    <span class="mi">1</span><span class="o">/</span><span class="mi">6</span><span class="o">/</span><span class="mi">19</span>     <span class="n">East</span>    <span class="n">Jones</span>  <span class="n">Pencil</span>     <span class="mi">95</span>       <span class="mf">1.99</span>   <span class="mf">189.05</span> 
<span class="mi">1</span>   <span class="mi">1</span><span class="o">/</span><span class="mi">23</span><span class="o">/</span><span class="mi">19</span>  <span class="n">Central</span>   <span class="n">Kivell</span>  <span class="n">Binder</span>     <span class="mi">50</span>      <span class="mf">19.99</span>   <span class="mf">999.50</span> 
<span class="mi">2</span>    <span class="mi">2</span><span class="o">/</span><span class="mi">9</span><span class="o">/</span><span class="mi">19</span>  <span class="n">Central</span>  <span class="n">Jardine</span>  <span class="n">Pencil</span>     <span class="mi">36</span>       <span class="mf">4.99</span>   <span class="mf">179.64</span> 
<span class="mi">3</span>   <span class="mi">2</span><span class="o">/</span><span class="mi">26</span><span class="o">/</span><span class="mi">19</span>  <span class="n">Central</span>     <span class="n">Gill</span>     <span class="n">Pen</span>     <span class="mi">27</span>      <span class="mf">19.99</span>   <span class="mf">539.73</span> 
<span class="mi">4</span>   <span class="mi">3</span><span class="o">/</span><span class="mi">15</span><span class="o">/</span><span class="mi">19</span>     <span class="n">West</span>  <span class="n">Sorvino</span>  <span class="n">Pencil</span>     <span class="mi">56</span>       <span class="mf">2.99</span>   <span class="mf">167.44</span> 
</code></pre></div><p>Then in my <code>test_my_module.py</code> file, I have the following unit test functions. The key is to patch
dependency variables and functions so that only what the functions are designed to do are tested.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">unittest.mock</span> <span class="kn">import</span> <span class="n">patch</span>

<span class="kn">from</span> <span class="nn">my_module</span> <span class="kn">import</span> <span class="n">DataLoader</span>


<span class="nd">@patch</span><span class="p">(</span><span class="s1">&#39;my_module.INPUT_FOLDERPATH&#39;</span><span class="p">,</span> <span class="s1">&#39;test/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_get_filepath</span><span class="p">():</span>
    <span class="n">data_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">)</span>
    <span class="n">actual</span> <span class="o">=</span> <span class="n">data_loader</span><span class="o">.</span><span class="n">get_filepath</span><span class="p">()</span>
    <span class="n">expected</span> <span class="o">=</span> <span class="s1">&#39;test/test.csv&#39;</span>
    <span class="k">assert</span> <span class="n">actual</span> <span class="o">==</span> <span class="n">expected</span>


<span class="nd">@patch</span><span class="p">(</span><span class="s1">&#39;my_module.pd.read_csv&#39;</span><span class="p">)</span>
<span class="nd">@patch</span><span class="p">(</span><span class="s1">&#39;my_module.DataLoader.get_filepath&#39;</span><span class="p">,</span> <span class="n">return_value</span><span class="o">=</span><span class="s1">&#39;testpath&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_load_data</span><span class="p">(</span><span class="n">mock_get_filepath</span><span class="p">,</span> <span class="n">mock_read_csv</span><span class="p">):</span>
    <span class="n">data_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">)</span>
    <span class="n">mock_get_filepath</span><span class="o">.</span><span class="n">assert_called_once</span><span class="p">()</span>
    <span class="n">data_loader</span><span class="o">.</span><span class="n">load_data</span><span class="p">()</span>
    <span class="n">mock_read_csv</span><span class="o">.</span><span class="n">assert_called_once</span><span class="p">()</span>
    <span class="n">mock_read_csv</span><span class="o">.</span><span class="n">assert_called_once_with</span><span class="p">(</span><span class="s1">&#39;testpath&#39;</span><span class="p">)</span>
</code></pre></div><p>Now let&rsquo;s run the test. In the terminal, go to the folder and run the following</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">pytest -v test_my_module.py
</code></pre></div><p>Our tests should pass.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">collected</span> <span class="mi">2</span> <span class="n">items</span>

<span class="n">test_my_module</span><span class="o">.</span><span class="n">py</span><span class="p">::</span><span class="n">test_get_filepath</span> <span class="n">PASSED</span>
<span class="n">test_my_module</span><span class="o">.</span><span class="n">py</span><span class="p">::</span><span class="n">test_load_data</span> <span class="n">PASSED</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>posts[0]</title>
            <link>https://dingdl.github.io/posts/2021/02/posts0/</link>
            <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://dingdl.github.io/posts/2021/02/posts0/</guid>
            <description>Recently I have found the motto below very motivating, which was quoted by one of our team members when trying to resolve a comment on his pull request.
So let&amp;rsquo;s kick off this post section and try to build stuff continously and incrementally.
 </description>
            <content type="html"><![CDATA[<p>Recently I have found the motto below very motivating,
which was quoted by one of our team members when trying to resolve a comment on his pull request.</p>
<p>So let&rsquo;s kick off this post section and try to build stuff continously and incrementally.</p>
<center>
<img src="../../../../img/quote.jpg" width = "700" alt="quote" align=center />
</center>]]></content>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Ding Luo</title>
    <link>dingdl.github.io/tags/go/</link>
    <description>Recent content in go on Ding Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="dingdl.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(Hu)go Template Primer</title>
      <link>dingdl.github.io/posts_copy/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>dingdl.github.io/posts_copy/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>dingdl.github.io/posts/2014/04/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>dingdl.github.io/posts/2014/04/getting-started-with-hugo/</guid>
      <description>import os from pyspark.sql import SparkSession spark = SparkSession.builder \ .master(&amp;#34;local&amp;#34;) \ .appName(&amp;#34;SparkTest&amp;#34;) \ .config(&amp;#34;k1&amp;#34;, &amp;#34;v1&amp;#34;) \ .getOrCreate() # Specify the filepath of the sample data. This requires absolute path with &amp;#39;file://&amp;#39; in the beginning folderpath = os.path.abspath(os.getcwd()) filepath = &amp;#39;&amp;#39;.join([&amp;#39;file://&amp;#39;, folderpath, &amp;#39;/SampleData.csv&amp;#39;]) Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>dingdl.github.io/posts_copy/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>dingdl.github.io/posts_copy/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo $(document).ready(function() { console.log(&amp;#39;Ready!&amp;#39;); }); Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
